{"version":3,"file":"enigma.min.js","sources":["node_modules/node-event-emitter/index.js","src/schema.js","src/interceptors/request/delta.js","src/interceptors/response/api.js","src/json-patch.js","src/interceptors/response/delta.js","src/interceptors/response/error.js","src/interceptors/response/out-param.js","src/interceptors/response/result.js","src/event-emitter.js","src/session.js","src/cache.js","src/rpc-resolver.js","src/rpc.js","src/suspend-resume.js","node_modules/extend/index.js","src/intercept.js","src/api-cache.js","src/qix.js"],"sourcesContent":["/**\n * Utility functions\n */\n\nvar util = {};\n\nutil.isObject = function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nutil.isNumber = function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nutil.isUndefined = function isUndefined(arg) {\n  return arg === void 0;\n}\n\nutil.isFunction = function isFunction(arg){\n  return typeof arg === 'function';\n}\n\n\n/**\n * EventEmitter class\n */\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!util.isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error' && !this._events.error) {\n    er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      throw Error('Uncaught, unspecified \"error\" event.');\n    }\n    return false;\n  }\n\n  handler = this._events[type];\n\n  if (util.isUndefined(handler))\n    return false;\n\n  if (util.isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (util.isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              util.isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (util.isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (util.isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!util.isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n\n      if (util.isFunction(console.error)) {\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n      }\n      if (util.isFunction(console.trace))\n        console.trace();\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (util.isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (util.isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (util.isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (Array.isArray(listeners)) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (util.isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (util.isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n","import KeyValueCache from './cache';\nimport Events from './event-emitter';\n\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n* Returns the camelCase counterpart of a symbol.\n* @param {String} symbol The symbol.\n* @return the camelCase counterpart.\n*/\nfunction toCamelCase(symbol) {\n  return symbol.substring(0, 1).toLowerCase() + symbol.substring(1);\n}\n\n/**\n * A facade function that allows parameters to be passed either by name\n * (through an object), or by position (through an array).\n * @param {Function} base The function that is being overriden. Will be\n *                        called with parameters in array-form.\n * @param {Object} defaults Parameter list and it's default values.\n * @param {*} params The parameters.\n */\nfunction namedParamFacade(base, defaults, ...params) {\n  if (params.length === 1 && typeof params[0] === 'object') {\n    const valid = Object.keys(params[0]).every(key => hasOwnProperty.call(defaults, key));\n    if (valid) {\n      params = Object.keys(defaults).map(key => params[0][key] || defaults[key]);\n    }\n  }\n  return base.apply(this, params);\n}\n\n/**\n* Qix schema definition.\n*/\nclass Schema {\n  /**\n  * Create a new schema instance.\n  * @param {Configuration} config The configuration for QIX.\n  */\n  constructor(config) {\n    this.config = config;\n    this.Promise = config.Promise;\n    this.schema = config.schema;\n    this.mixins = new KeyValueCache();\n    this.types = new KeyValueCache();\n  }\n\n  /**\n  * Function used to add a mixin object to the mixin cache. Will be mixed into the API\n  * of the specified key when generated.\n  * @param {Object} mixin Mixin object.\n  * @param {String|Array<String>} mixin.types String or array of strings containing the\n  *                                           API-types that will be mixed in.\n  * @param {Object} [mixin.extend] Object literal containing the methods that\n  *                                will be extended on the specified API.\n  * @param {Object} [mixin.override] Object literal containing the methods to\n  *                                  override existing methods.\n  * @param {Function} [mixin.init] Init function that, if defined, will run when an API is\n  *                                instantiated. It runs with Promise and API object as parameters.\n  */\n  registerMixin({\n    types, type, extend, override, init,\n  }) {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    // to support a single type\n    if (type) {\n      types.push(type);\n    }\n    const cached = { extend, override, init };\n    types.forEach((typeKey) => {\n      const entryList = this.mixins.get(typeKey);\n      if (entryList) {\n        entryList.push(cached);\n      } else {\n        this.mixins.add(typeKey, [cached]);\n      }\n    });\n  }\n\n  /**\n  * Function used to generate a type definition.\n  * @param {String} type The type.\n  * @returns {{create: Function, def: Object}} Returns an object with a definition\n  *          of the type and a create factory.\n  */\n  generate(type) {\n    const entry = this.types.get(type);\n    if (entry) {\n      return entry;\n    }\n    if (!this.schema.structs[type]) {\n      throw new Error(`${type} not found`);\n    }\n    const factory = this.generateApi(type, this.schema.structs[type]);\n    this.types.add(type, factory);\n    return factory;\n  }\n\n  /**\n  * Function used to generate an API definition for a given type.\n  * @param {String} type The type to generate.\n  * @param {Object} schema The schema describing the type.\n  * @returns {{create: (function(session:Object, handle:Number, id:String,\n  *          customKey:String)), def: Object}} Returns the API definition.\n  */\n  generateApi(type, schema) {\n    const api = Object.create({});\n\n    this.generateDefaultApi(api, schema); // Generate default\n    this.mixinType(type, api); // Mixin default type\n    this.mixinNamedParamFacade(api, schema); // Mixin named parameter support\n\n    const create = function create(session, handle, id, customKey) {\n      const instance = Object.create(api);\n\n      Events.mixin(instance); // Always mixin event-emitter per instance\n\n      Object.defineProperties(instance, {\n        session: {\n          enumerable: true,\n          value: session,\n        },\n        handle: {\n          enumerable: true,\n          value: handle,\n          writable: true,\n        },\n        id: {\n          enumerable: true,\n          value: id,\n        },\n        type: {\n          enumerable: true,\n          value: type,\n        },\n        genericType: {\n          enumerable: true,\n          value: customKey,\n        },\n      });\n\n      let mixinList = this.mixins.get(type) || [];\n      if (customKey !== type) {\n        this.mixinType(customKey, instance); // Mixin custom types\n        mixinList = mixinList.concat(this.mixins.get(customKey) || []);\n      }\n      mixinList.forEach((mixin) => {\n        if (typeof mixin.init === 'function') {\n          mixin.init({ config: this.config, api: instance });\n        }\n      });\n\n      return instance;\n    }.bind(this);\n\n    return {\n      create,\n      def: api,\n    };\n  }\n\n  /**\n  * Function used to generate the methods with the right handlers to the object\n  * API that is being generated.\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  generateDefaultApi(api, schema) {\n    Object.keys(schema).forEach((method) => {\n      const out = schema[method].Out && schema[method].Out;\n      const outKey = out.length === 1 ? out[0].Name : -1;\n      const fnName = toCamelCase(method);\n\n      api[fnName] = function generatedMethod(...params) {\n        return this.session.send({\n          handle: this.handle,\n          method,\n          params,\n          outKey,\n        });\n      };\n    });\n  }\n\n  /**\n  * Function used to add mixin methods to a specified API.\n  * @param {String} type Used to specify which mixin should be woven in.\n  * @param {Object} api The object that will be woven.\n  */\n  mixinType(type, api) {\n    const mixinList = this.mixins.get(type);\n    if (mixinList) {\n      mixinList.forEach(({ extend = {}, override = {} }) => {\n        Object.keys(override).forEach((key) => {\n          if (typeof api[key] === 'function' && typeof override[key] === 'function') {\n            const baseFn = api[key];\n            api[key] = function wrappedFn(...args) {\n              return override[key].apply(this, [baseFn.bind(this), ...args]);\n            };\n          } else {\n            throw new Error(`No function to override. Type: ${type} function: ${key}`);\n          }\n        });\n        Object.keys(extend).forEach((key) => {\n          // handle overrides\n          if (typeof api[key] === 'function' && typeof extend[key] === 'function') {\n            throw new Error(`Extend is not allowed for this mixin. Type: ${type} function: ${key}`);\n          } else {\n            api[key] = extend[key];\n          }\n        });\n      });\n    }\n  }\n\n  /**\n  * Function used to mixin the named parameter facade.\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  mixinNamedParamFacade(api, schema) {\n    Object.keys(schema).forEach((key) => {\n      const fnName = toCamelCase(key);\n      const base = api[fnName];\n      const defaults = schema[key].In.reduce((result, item) => {\n        result[item.Name] = item.DefaultValue;\n        return result;\n      }, {});\n\n      api[fnName] = function namedParamWrapper(...params) {\n        return namedParamFacade.apply(this, [base, defaults, ...params]);\n      };\n    });\n  }\n}\n\nexport default Schema;\n","const SUCCESS_KEY = 'qSuccess';\n\nexport default function deltaRequestInterceptor(session, request) {\n  const delta =\n    session.config.protocol.delta &&\n    request.outKey !== -1 &&\n    request.outKey !== SUCCESS_KEY;\n  if (delta) {\n    request.delta = delta;\n  }\n  return request;\n}\n","/**\n* Response interceptor for generating APIs. Handles the quirks of engine not\n* returning an error when an object is missing.\n* @param {Object} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the generated API\n*/\nexport default function apiInterceptor(session, request, response) {\n  if (response.qHandle && response.qType) {\n    return session.getObjectApi({\n      handle: response.qHandle,\n      type: response.qType,\n      id: response.qGenericId,\n      genericType: response.qGenericType,\n    });\n  } else if (response.qHandle === null && response.qType === null) {\n    return session.config.Promise.reject(new Error('Object not found'));\n  }\n  return response;\n}\n","import originalExtend from 'extend';\n\nconst extend = originalExtend.bind(null, true);\nconst JSONPatch = {};\nconst { isArray } = Array;\nfunction isObject(v) { return v != null && !Array.isArray(v) && typeof v === 'object'; }\nfunction isUndef(v) { return typeof v === 'undefined'; }\nfunction isFunction(v) { return typeof v === 'function'; }\n\n/**\n* Generate an exact duplicate (with no references) of a specific value.\n*\n* @private\n* @param {Object} The value to duplicate\n* @returns {Object} a unique, duplicated value\n*/\nfunction generateValue(val) {\n  if (val) {\n    return extend({}, { val }).val;\n  }\n  return val;\n}\n\n/**\n* An additional type checker used to determine if the property is of internal\n* use or not a type that can be translated into JSON (like functions).\n*\n* @private\n* @param {Object} obj The object which has the property to check\n* @param {String} The property name to check\n* @returns {Boolean} Whether the property is deemed special or not\n*/\nfunction isSpecialProperty(obj, key) {\n  return isFunction(obj[key]) ||\n    key.substring(0, 2) === '$$' ||\n    key.substring(0, 1) === '_';\n}\n\n/**\n* Finds the parent object from a JSON-Pointer (\"/foo/bar/baz\" = \"bar\" is \"baz\" parent),\n* also creates the object structure needed.\n*\n* @private\n* @param {Object} data The root object to traverse through\n* @param {String} The JSON-Pointer string to use when traversing\n* @returns {Object} The parent object\n*/\nfunction getParent(data, str) {\n  const seperator = '/';\n  const parts = str.substring(1).split(seperator).slice(0, -1);\n  let numPart;\n\n  parts.forEach((part, i) => {\n    if (i === parts.length) {\n      return;\n    }\n    numPart = +part;\n    const newPart = !isNaN(numPart) ? [] : {};\n    data[numPart || part] = isUndef(data[numPart || part]) ?\n      newPart :\n      data[part];\n    data = data[numPart || part];\n  });\n\n  return data;\n}\n\n/**\n* Cleans an object of all its properties, unless they're deemed special or\n* cannot be removed by configuration.\n*\n* @private\n* @param {Object} obj The object to clean\n*/\nfunction emptyObject(obj) {\n  Object.keys(obj).forEach((key) => {\n    const config = Object.getOwnPropertyDescriptor(obj, key);\n\n    if (config.configurable && !isSpecialProperty(obj, key)) {\n      delete obj[key];\n    }\n  });\n}\n\n/**\n* Compare an object with another, could be object, array, number, string, bool.\n*\n* @param {Object} a The first object to compare\n* @param {Object} a The second object to compare\n* @returns {Boolean} Whether the objects are identical\n*/\nfunction compare(a, b) {\n  let isIdentical = true;\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n    Object.keys(a).forEach((key) => {\n      if (!compare(a[key], b[key])) {\n        isIdentical = false;\n      }\n    });\n    return isIdentical;\n  } else if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, l = a.length; i < l; i += 1) {\n      if (!compare(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a === b;\n}\n\n/**\n* Generates patches by comparing two arrays.\n*\n* @private\n* @param {Array} oldA The old (original) array, which will be patched\n* @param {Array} newA The new array, which will be used to compare against\n* @returns {Array} An array of patches (if any)\n*/\nfunction patchArray(original, newA, basePath) {\n  let patches = [];\n  const oldA = original.slice();\n  let tmpIdx = -1;\n\n  function findIndex(a, id, idx) {\n    if (a[idx] && isUndef(a[idx].qInfo)) {\n      return null;\n    } else if (a[idx] && a[idx].qInfo.qId === id) {\n      // shortcut if identical\n      return idx;\n    }\n    for (let ii = 0, ll = a.length; ii < ll; ii += 1) {\n      if (a[ii] && a[ii].qInfo.qId === id) {\n        return ii;\n      }\n    }\n    return -1;\n  }\n\n  if (compare(newA, oldA)) {\n    // array is unchanged\n    return patches;\n  }\n\n  if (!isUndef(newA[0]) && isUndef(newA[0].qInfo)) {\n    // we cannot create patches without unique identifiers, replace array...\n    patches.push({\n      op: 'replace',\n      path: basePath,\n      value: newA,\n    });\n    return patches;\n  }\n\n  for (let i = oldA.length - 1; i >= 0; i -= 1) {\n    tmpIdx = findIndex(newA, oldA[i].qInfo && oldA[i].qInfo.qId, i);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${i}`,\n      });\n      oldA.splice(i, 1);\n    } else {\n      patches = patches.concat(JSONPatch.generate(oldA[i], newA[tmpIdx], `${basePath}/${i}`));\n    }\n  }\n\n  for (let i = 0, l = newA.length; i < l; i += 1) {\n    tmpIdx = findIndex(oldA, newA[i].qInfo && newA[i].qInfo.qId);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'add',\n        path: `${basePath}/${i}`,\n        value: newA[i],\n      });\n      oldA.splice(i, 0, newA[i]);\n    } else if (tmpIdx !== i) {\n      patches.push({\n        op: 'move',\n        path: `${basePath}/${i}`,\n        from: `${basePath}/${tmpIdx}`,\n      });\n      oldA.splice(i, 0, oldA.splice(tmpIdx, 1)[0]);\n    }\n  }\n  return patches;\n}\n\n/**\n* Generate an array of JSON-Patch:es following the JSON-Patch Specification Draft.\n*\n* See [specification draft](http://tools.ietf.org/html/draft-ietf-appsawg-json-patch-10)\n*\n* Does NOT currently generate patches for arrays (will replace them)\n*\n* @param {Object} original The object to patch to\n* @param {Object} newData The object to patch from\n* @param {String} [basePath] The base path to use when generating the paths for\n*                            the patches (normally not used)\n* @returns {Array} An array of patches\n*/\nJSONPatch.generate = function generate(original, newData, basePath) {\n  basePath = basePath || '';\n  let patches = [];\n\n  Object.keys(newData).forEach((key) => {\n    const val = generateValue(newData[key]);\n    const oldVal = original[key];\n    const tmpPath = `${basePath}/${key}`;\n\n    if (compare(val, oldVal) || isSpecialProperty(newData, key)) {\n      return;\n    }\n    if (isUndef(oldVal)) {\n      // property does not previously exist\n      patches.push({\n        op: 'add',\n        path: tmpPath,\n        value: val,\n      });\n    } else if (isObject(val) && isObject(oldVal)) {\n      // we need to generate sub-patches for this, since it already exist\n      patches = patches.concat(JSONPatch.generate(oldVal, val, tmpPath));\n    } else if (isArray(val) && isArray(oldVal)) {\n      patches = patches.concat(patchArray(oldVal, val, tmpPath));\n    } else {\n      // it's a simple property (bool, string, number)\n      patches.push({\n        op: 'replace',\n        path: `${basePath}/${key}`,\n        value: val,\n      });\n    }\n  });\n\n  Object.keys(original).forEach((key) => {\n    if (isUndef(newData[key]) && !isSpecialProperty(original, key)) {\n      // this property does not exist anymore\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${key}`,\n      });\n    }\n  });\n\n  return patches;\n};\n\n/**\n* Apply a list of patches to an object.\n*\n* @param {Object} original The object to patch\n* @param {Array} patches The list of patches to apply\n*/\nJSONPatch.apply = function apply(original, patches) {\n  patches.forEach((patch) => {\n    let parent = getParent(original, patch.path);\n    let key = patch.path.split('/').splice(-1)[0];\n    let target = key && isNaN(+key) ? parent[key] : parent[+key] || parent;\n    const from = patch.from ? patch.from.split('/').splice(-1)[0] : null;\n\n    if (patch.path === '/') {\n      parent = null;\n      target = original;\n    }\n\n    if (patch.op === 'add' || patch.op === 'replace') {\n      if (isArray(parent)) {\n        // trust indexes from patches, so don't replace the index if it's an add\n        if (key === '-') {\n          key = parent.length;\n        }\n        parent.splice(+key, patch.op === 'add' ? 0 : 1, patch.value);\n      } else if (isArray(target) && isArray(patch.value)) {\n        const newValues = patch.value.slice();\n        // keep array reference if possible...\n        target.length = 0;\n        target.push(...newValues);\n      } else if (isObject(target) && isObject(patch.value)) {\n        // keep object reference if possible...\n        emptyObject(target);\n        extend(target, patch.value);\n      } else if (!parent) {\n        throw new Error('Patchee is not an object we can patch');\n      } else {\n        // simple value\n        parent[key] = patch.value;\n      }\n    } else if (patch.op === 'move') {\n      const oldParent = getParent(original, patch.from);\n      if (isArray(parent)) {\n        parent.splice(+key, 0, oldParent.splice(+from, 1)[0]);\n      } else {\n        parent[key] = oldParent[from];\n        delete oldParent[from];\n      }\n    } else if (patch.op === 'remove') {\n      if (isArray(parent)) {\n        parent.splice(+key, 1);\n      } else {\n        delete parent[key];\n      }\n    }\n  });\n};\n\n/**\n* Deep clone an object.\n*\n* @param {Object} obj The object to clone\n* @returns {Object} A new object identical to the `obj`\n*/\nJSONPatch.clone = function clone(obj) {\n  return extend({}, obj);\n};\n\n/**\n* Creates a JSON-patch.\n*\n* @param {String} op The operation of the patch. Available values: \"add\", \"remove\", \"move\"\n* @param {Object} [val] The value to set the `path` to. If `op` is `move`, `val`\n*                       is the \"from JSON-path\" path\n* @param {String} path The JSON-path for the property to change (e.g. \"/qHyperCubeDef/columnOrder\")\n* @returns {Object} A patch following the JSON-patch specification\n*/\nJSONPatch.createPatch = function createPatch(op, val, path) {\n  const patch = {\n    op: op.toLowerCase(),\n    path,\n  };\n  if (patch.op === 'move') {\n    patch.from = val;\n  } else if (typeof val !== 'undefined') {\n    patch.value = val;\n  }\n  return patch;\n};\n\n/**\n* Apply the differences of two objects (keeping references if possible).\n* Identical to running `JSONPatch.apply(original, JSONPatch.generate(original, newData));`\n*\n* @param {Object} original The object to update/patch\n* @param {Object} newData the object to diff against\n*\n* @example\n* var obj1 = { foo: [1,2,3], bar: { baz: true, qux: 1 } };\n* var obj2 = { foo: [4,5,6], bar: { baz: false } };\n* JSONPatch.updateObject(obj1, obj2);\n* // => { foo: [4,5,6], bar: { baz: false } };\n*/\nJSONPatch.updateObject = function updateObject(original, newData) {\n  if (!Object.keys(original).length) {\n    extend(original, newData);\n    return;\n  }\n  JSONPatch.apply(original, JSONPatch.generate(original, newData));\n};\n\nexport default JSONPatch;\n","import JSONPatch from '../../json-patch';\nimport KeyValueCache from '../../cache';\n\nconst sessions = {};\n\n/**\n* Function to make sure we release handle caches when they are closed.\n*\n* @param {Session} session The session instance to listen on.\n*/\nconst bindSession = (session) => {\n  if (!sessions[session.id]) {\n    const cache = {};\n    sessions[session.id] = cache;\n    session.on('traffic:received', data => data.close && data.close.forEach(handle => delete cache[handle]));\n    session.on('closed', () => delete sessions[session.id]);\n  }\n};\n\n/**\n* Simple function that ensures the session events has been bound, and returns\n* either an existing key-value cache or creates one for the specified handle.\n*\n* @param {Session} session The session that owns the handle.\n* @param {Number} handle The object handle to retrieve the cache for.\n* @returns {KeyValueCache} The cache instance.\n*/\nconst getHandleCache = (session, handle) => {\n  bindSession(session);\n  const cache = sessions[session.id];\n  if (!cache[handle]) {\n    cache[handle] = new KeyValueCache();\n  }\n  return cache[handle];\n};\n\n/**\n* Function used to apply a list of patches and return the patched value.\n* @param {Session} session The session.\n* @param {Number} handle The object handle.\n* @param {String} cacheId The cacheId.\n* @param {Array} patches The patches.\n* @returns {Object} Returns the patched value.\n*/\nconst patchValue = (session, handle, cacheId, patches) => {\n  const cache = getHandleCache(session, handle);\n  let entry = cache.get(cacheId);\n  if (typeof entry === 'undefined') {\n    entry = Array.isArray(patches[0].value) ? [] : {};\n  }\n  if (patches.length) {\n    if (patches[0].path === '/' && typeof patches[0].value !== 'object') {\n      // 'plain' values on root path is not supported (no object reference),\n      // so we simply store the value directly:\n      entry = patches[0].value;\n    } else {\n      JSONPatch.apply(entry, patches);\n    }\n    cache.set(cacheId, entry);\n  }\n  return entry;\n};\n\n/**\n* Process delta interceptor.\n* @param {Session} session The session the intercept is being executed on.\n* @param {Object} request The JSON-RPC request.\n* @param {Object} response The response.\n* @returns {Object} Returns the patched response\n*/\nexport default function deltaInterceptor(session, request, response) {\n  const { delta, result } = response;\n  if (delta) {\n    // when delta is on the response data is expected to be an array of patches:\n    Object.keys(result).forEach((key) => {\n      if (!Array.isArray(result[key])) {\n        throw new Error('Unexpected RPC response, expected array of patches');\n      }\n      result[key] = patchValue(session, request.handle, `${request.method}-${key}`, result[key]);\n    });\n    // return a cloned response object to avoid patched object references:\n    return JSON.parse(JSON.stringify(response));\n  }\n  return response;\n}\n\n// export object reference for testing purposes:\ndeltaInterceptor.sessions = sessions;\n","/**\n* Process error interceptor.\n* @param {Object} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the defined error for an error, else the response.\n*/\nexport default function errorInterceptor(session, request, response) {\n  if (typeof response.error !== 'undefined') {\n    const data = response.error;\n    const error = new Error(data.message);\n    error.code = data.code;\n    error.parameter = data.parameter;\n    return session.config.Promise.reject(error);\n  }\n  return response;\n}\n","const RETURN_KEY = 'qReturn';\n\n/**\n* Picks out the result \"out\" parameter based on the QIX method+schema, with\n* some specific handling for some methods that breaks the predictable protocol.\n* @param {Object} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function outParamInterceptor(session, request, response) {\n  if (request.method === 'CreateSessionApp' || request.method === 'CreateSessionAppFromApp') {\n    // this method returns multiple out params that we need\n    // to normalize before processing the response further:\n    response[RETURN_KEY].qGenericId = response[RETURN_KEY].qGenericId || response.qSessionAppId;\n  } else if (request.method === 'GetInteract') {\n    // this method returns a qReturn value when it should only return\n    // meta.outKey:\n    delete response[RETURN_KEY];\n  }\n\n  if (hasOwnProperty.call(response, RETURN_KEY)) {\n    return response[RETURN_KEY];\n  } else if (request.outKey !== -1) {\n    return response[request.outKey];\n  }\n\n  return response;\n}\n","/**\n* Process result interceptor.\n* @param {Object} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function resultInterceptor(session, request, response) {\n  return response.result;\n}\n","import EventEmitter from 'node-event-emitter';\n\n/**\n* @module EventEmitter\n*/\nexport default {\n\n  /**\n  * Function used to add event handling to objects passed in.\n  * @param {Object} obj Object instance that will get event handling.\n  */\n  mixin: (obj) => {\n    Object.keys(EventEmitter.prototype).forEach((key) => {\n      obj[key] = EventEmitter.prototype[key];\n    });\n    EventEmitter.init(obj);\n  },\n};\n","import EventEmitter from './event-emitter';\n\nconst RPC_CLOSE_NORMAL = 1000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nlet cacheId = 0;\n\nclass Session {\n  /**\n  * Creates a new Session instance.\n  * @param {Object} options The configuration option for this class.\n  * @param {ApiCache} options.apis The ApiCache instance to bridge events towards.\n  * @param {Object} options.config The configuration object for this session.\n  * @param {Intercept} options.intercept The intercept instance to use.\n  * @param {RPC} options.rpc The RPC instance to use when communicating towards Engine.\n  * @param {SuspendResume} options.suspendResume The SuspendResume instance to use.\n  */\n  constructor(options) {\n    const session = this;\n    Object.assign(session, options);\n    this.Promise = this.config.Promise;\n    this.definition = this.config.definition;\n    EventEmitter.mixin(session);\n    cacheId += 1;\n    session.id = cacheId;\n    session.rpc.on('socket-error', session.onRpcError.bind(session));\n    session.rpc.on('closed', session.onRpcClosed.bind(session));\n    session.rpc.on('message', session.onRpcMessage.bind(session));\n    session.rpc.on('notification', session.onRpcNotification.bind(session));\n    session.rpc.on('traffic', session.onRpcTraffic.bind(session));\n    session.on('closed', () => session.onSessionClosed());\n  }\n\n  /**\n  * Event handler for re-triggering error events from RPC.\n  * @emits socket-error\n  * @param {Error} err Webocket error event.\n  */\n  onRpcError(err) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    this.emit('socket-error', err);\n  }\n\n  /**\n  * Event handler for the RPC close event.\n  * @emits suspended\n  * @emits closed\n  * @param {Event} evt WebSocket close event.\n  */\n  onRpcClosed(evt) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (evt.code === RPC_CLOSE_NORMAL || evt.code === RPC_CLOSE_MANUAL_SUSPEND) {\n      return;\n    }\n    if (this.config.suspendOnClose) {\n      this.suspendResume.suspend().then(() => this.emit('suspended', { initiator: 'network' }));\n    } else {\n      this.emit('closed', evt);\n    }\n  }\n\n  /**\n  * Event handler for the RPC message event.\n  * @param {Object} response JSONRPC response.\n  */\n  onRpcMessage(response) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (response.change) {\n      response.change.forEach(handle => this.emitHandleChanged(handle));\n    }\n    if (response.close) {\n      response.close.forEach(handle => this.emitHandleClosed(handle));\n    }\n  }\n\n  /**\n  * Event handler for the RPC notification event.\n  * @emits notification:*\n  * @emits notification:[JSONRPC notification name]\n  * @param {Object} response The JSONRPC notification.\n  */\n  onRpcNotification(response) {\n    this.emit('notification:*', response.method, response.params);\n    this.emit(`notification:${response.method}`, response.params);\n  }\n\n  /**\n  * Event handler for the RPC traffic event.\n  * @emits traffic:*\n  * @emits traffic:sent\n  * @emits traffic:received\n  * @param {String} dir The traffic direction, sent or received.\n  * @param {Object} data JSONRPC request/response/WebSocket message.\n  */\n  onRpcTraffic(dir, data) {\n    this.emit('traffic:*', dir, data);\n    this.emit(`traffic:${dir}`, data);\n  }\n\n  /**\n  * Event handler for cleaning up API instances when a session has been closed.\n  * @emits api#closed\n  */\n  onSessionClosed() {\n    this.apis.getApis().forEach((entry) => {\n      entry.api.emit('closed');\n      entry.api.removeAllListeners();\n    });\n    this.apis.clear();\n  }\n\n  /**\n   * Function used to get an API for a backend object.\n   * @param {Object} args Arguments used to create object API.\n   * @param {Number} args.handle Handle of the backend object.\n   * @param {String} args.id ID of the backend object.\n   * @param {String} args.type QIX type of the backend object. Can for example\n   *                           be \"Doc\" or \"GenericVariable\".\n   * @param {String} args.genericType Custom type of the backend object, if defined in qInfo.\n   * @returns {*} Returns the generated and possibly augmented API.\n   */\n  getObjectApi(args) {\n    const {\n      handle, id, type, genericType,\n    } = args;\n    let api = this.apis.getApi(handle);\n    if (api) {\n      return api;\n    }\n    api = this.definition\n      .generate(type)\n      .create(this, handle, id, genericType);\n    this.apis.add(handle, api);\n    return api;\n  }\n\n  /**\n  * Establishes the RPC socket connection and returns the Global instance.\n  * @returns {Promise} Eventually resolved if the connection was successful.\n  */\n  open() {\n    if (!this.globalPromise) {\n      const args = {\n        handle: -1,\n        id: 'Global',\n        type: 'Global',\n        genericType: 'Global',\n      };\n      this.globalPromise = this.rpc.open()\n        .then(() => this.getObjectApi(args))\n        .then((global) => {\n          this.emit('opened');\n          return global;\n        });\n    }\n    return this.globalPromise;\n  }\n\n  /**\n  * Function used to send data on the RPC socket.\n  * @param {Object} request The request to be sent. (data and some meta info)\n  * @returns {Object} Returns a promise instance.\n  */\n  send(request) {\n    if (this.suspendResume.isSuspended) {\n      return this.Promise.reject(new Error('Session suspended'));\n    }\n    request.id = this.rpc.createRequestId();\n    const promise = this.intercept.executeRequests(this, this.Promise.resolve(request))\n      .then((augmentedRequest) => {\n        const data = Object.assign({}, this.config.protocol, augmentedRequest);\n        // the outKey value is used by multiple-out interceptor, at some point\n        // we need to refactor that implementation and figure out how to transport\n        // this value without hijacking the JSONRPC request object:\n        delete data.outKey;\n        const response = this.rpc.send(data);\n        augmentedRequest.retry = () => this.send(request);\n        return this.intercept.executeResponses(this, response, augmentedRequest);\n      });\n    Session.addToPromiseChain(promise, 'requestId', request.id);\n    return promise;\n  }\n\n  /**\n  * Suspends the session (\"sleeping state\"), and closes the RPC connection.\n  * @emits suspended\n  * @returns {Promise} Eventually resolved when the RPC connection is closed.\n  */\n  suspend() {\n    return this.suspendResume.suspend()\n      .then(() => this.emit('suspended', { initiator: 'manual' }));\n  }\n\n  /**\n  * Resumes a previously suspended session.\n  * @param {Boolean} onlyIfAttached If true, resume only if the session was re-attached.\n  * @returns {Promise} Eventually resolved if the session was successfully resumed,\n  *                    otherwise rejected.\n  */\n  resume(onlyIfAttached) {\n    return this.suspendResume.resume(onlyIfAttached).then((value) => {\n      this.emit('resumed');\n      return value;\n    });\n  }\n\n  /**\n  * Function used to close the session.\n  * @returns {Promise} Eventually resolved when the RPC connection is closed.\n  */\n  close() {\n    this.globalPromise = undefined;\n    return this.rpc.close().then(evt => this.emit('closed', evt));\n  }\n\n  /**\n  * Given a handle, this function will emit the 'changed' event on the\n  * corresponding API instance.\n  * @param {Number} handle The handle of the API instance.\n  * @emits api#changed\n  */\n  emitHandleChanged(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('changed');\n    }\n  }\n\n  /**\n  * Given a handle, this function will emit the 'closed' event on the\n  * corresponding API instance.\n  * @param {Number} handle The handle of the API instance.\n  * @emits api#closed\n  */\n  emitHandleClosed(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('closed');\n      api.removeAllListeners();\n    }\n  }\n\n  /**\n  * Function used to add info on the promise chain.\n  * @private\n  * @param {Promise} promise The promise to add info on.\n  * @param {String} name The property to add info on.\n  * @param {Any} value The info to add.\n  */\n  static addToPromiseChain(promise, name, value) {\n    promise[name] = value;\n    const { then } = promise;\n    promise.then = function patchedThen(...params) {\n      const chain = then.apply(this, params);\n      Session.addToPromiseChain(chain, name, value);\n      return chain;\n    };\n  }\n}\n\nexport default Session;\n","/**\n* Key-value cache\n*/\nclass KeyValueCache {\n  constructor() {\n    this.entries = {};\n  }\n\n  /**\n  * Adds an entry.\n  * @function KeyValueCache#add\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry to be added.\n  */\n  add(key, entry) {\n    key += '';\n    if (typeof this.entries[key] !== 'undefined') {\n      throw new Error(`Entry already defined with key ${key}`);\n    }\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Sets an entry.\n  * @function KeyValueCache#set\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry.\n  */\n  set(key, entry) {\n    key += '';\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Removes an entry.\n  * @function KeyValueCache#remove\n  * @param {String} key The key representing an entry.\n  */\n  remove(key) {\n    delete this.entries[key];\n  }\n\n  /**\n  * Gets an entry.\n  * @function KeyValueCache#get\n  * @param {String} key The key representing an entry.\n  * @returns {*} The entry for the key.\n  */\n  get(key) {\n    return this.entries[key];\n  }\n\n  /**\n  * Gets a list of all entries.\n  * @function KeyValueCache#getAll\n  * @returns {Array} The list of entries including its `key` and `value` properties.\n  */\n  getAll() {\n    return Object.keys(this.entries).map(key =>\n      ({\n        key,\n        value: this.entries[key],\n      }));\n  }\n\n  /**\n  * Gets a key for an entry.\n  * @function KeyValueCache#getKey\n  * @param {*} entry The entry to locate the key for.\n  * @returns {String} The key representing an entry.\n  */\n  getKey(entry) {\n    return Object.keys(this.entries).filter(key =>\n      this.entries[key] === entry)[0];\n  }\n\n  /**\n  * Clears the cache of all entries.\n  * @function KeyValueCache#clear\n  */\n  clear() {\n    this.entries = {};\n  }\n}\n\nexport default KeyValueCache;\n","import Events from './event-emitter';\n\n/**\n * Helper class for handling RPC calls\n */\nclass RPCResolver {\n  constructor(id, resolve, reject) {\n    Events.mixin(this);\n    this.id = id;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n  resolveWith(data) {\n    this.resolve(data);\n    this.emit('resolved', this.id);\n  }\n  rejectWith(err) {\n    this.reject(err);\n    this.emit('rejected', this.id);\n  }\n}\n\nexport default RPCResolver;\n","import Events from './event-emitter';\nimport RPCResolver from './rpc-resolver';\n\n/**\n* This class handles remote procedure calls on a web socket.\n*/\nclass RPC {\n  /**\n  * Create a new RPC instance.\n  * @param {Object} options The configuration options for this class.\n  * @param {Function} options.Promise The promise constructor to use.\n  * @param {String} options.url The complete websocket URL used to connect.\n  * @param {Function} options.createSocket The function callback to create a WebSocket.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    Events.mixin(this);\n    this.resolvers = {};\n    this.requestId = 0;\n    this.openedPromise = undefined;\n  }\n\n  /**\n  * Opens a connection to the configured endpoint.\n  * @param {Boolean} force - ignores all previous and outstanding open calls if set to true.\n  * @returns {Object} A promise instance.\n  */\n  open(force = false) {\n    if (!force && this.openedPromise) {\n      return this.openedPromise;\n    }\n\n    try {\n      this.socket = this.createSocket(this.url);\n    } catch (err) {\n      return this.Promise.reject(err);\n    }\n\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onclose = this.onClose.bind(this);\n    this.socket.onerror = this.onError.bind(this);\n    this.socket.onmessage = this.onMessage.bind(this);\n    this.openedPromise = new this.Promise((resolve, reject) => this.registerResolver('opened', resolve, reject));\n    this.closedPromise = new this.Promise((resolve, reject) => this.registerResolver('closed', resolve, reject));\n    return this.openedPromise;\n  }\n\n  /**\n  * Resolves the open promise when a connection is successfully established.\n  */\n  onOpen() {\n    this.resolvers.opened.resolveWith(() => this.closedPromise);\n  }\n\n  /**\n  * Resolves the close promise when a connection is closed.\n  * @param {Object} event - The event describing close.\n  */\n  onClose(event) {\n    this.emit('closed', event);\n    this.resolvers.closed.resolveWith(event);\n    this.rejectAllOutstandingResolvers({ code: -1, message: 'Socket closed' });\n  }\n\n  /**\n  * Closes a connection.\n  * @param {Number} [code=1000] - The reason code for closing the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing why the connection is closed.\n  * @returns {Object} Returns a promise instance.\n  */\n  close(code = 1000, reason = '') {\n    if (this.socket) {\n      this.socket.close(code, reason);\n      this.socket = null;\n    }\n    return this.closedPromise;\n  }\n\n  /**\n  * Emits an error event and rejects the open promise if an error is raised on the connection.\n  * @param {Object} event - The event describing the error.\n  */\n  onError(event) {\n    if (this.resolvers.opened) {\n      this.resolvers.opened.rejectWith(event);\n    } else {\n      // only emit errors after the initial open promise has been resolved,\n      // this makes it possible to catch early websocket errors as well\n      // as run-time ones:\n      this.emit('socket-error', event);\n    }\n    this.rejectAllOutstandingResolvers({ code: -1, message: 'Socket error' });\n  }\n\n  /**\n  * Parses the onMessage event on the connection and resolve the promise for the request.\n  * @param {Object} event - The event describing the message.\n  */\n  onMessage(event) {\n    const data = JSON.parse(event.data);\n    this.emit('traffic', 'received', data);\n    if (typeof data.id !== 'undefined') {\n      this.emit('message', data);\n      this.resolvers[data.id].resolveWith(data);\n    } else {\n      this.emit(data.params ? 'notification' : 'message', data);\n    }\n  }\n\n  /**\n  * Rejects all outstanding resolvers.\n  * @param {Object} reason - The reject reason.\n  */\n  rejectAllOutstandingResolvers(reason) {\n    Object.keys(this.resolvers).forEach((id) => {\n      if (id === 'opened' || id === 'closed') {\n        return; // \"opened\" and \"closed\" should not be handled here\n      }\n      const resolver = this.resolvers[id];\n      resolver.rejectWith(reason);\n    });\n  }\n\n  /**\n  * Unregisters a resolver.\n  * @param {Number|String} id - The ID to unregister the resolver with.\n  */\n  unregisterResolver(id) {\n    const resolver = this.resolvers[id];\n    resolver.removeAllListeners();\n    delete this.resolvers[id];\n  }\n\n  /**\n  * Registers a resolver.\n  * @param {Number|String} id - The ID to register the resolver with.\n  * @returns {Function} The promise executor function.\n  */\n  registerResolver(id, resolve, reject) {\n    const resolver = new RPCResolver(id, resolve, reject);\n    this.resolvers[id] = resolver;\n    resolver.on('resolved', resolvedId => this.unregisterResolver(resolvedId));\n    resolver.on('rejected', rejectedId => this.unregisterResolver(rejectedId));\n  }\n\n  /**\n  * Sends data on the socket.\n  * @param {Object} data - The data to send.\n  * @returns {Object} A promise instance.\n  */\n  send(data) {\n    if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n      return this.Promise.reject(new Error('Not connected'));\n    }\n    if (!data.id) {\n      data.id = this.createRequestId();\n    }\n    data.jsonrpc = '2.0';\n    return new this.Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify(data));\n      this.emit('traffic', 'sent', data);\n      return this.registerResolver(data.id, resolve, reject);\n    });\n  }\n\n  createRequestId() {\n    this.requestId += 1;\n    return this.requestId;\n  }\n}\n\nexport default RPC;\n","const ON_ATTACHED_TIMEOUT_MS = 5000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nclass SuspendResume {\n  /**\n  * Creates a new SuspendResume instance.\n  * @param {Object} options The configuration option for this class.\n  * @param {Promise} options.Promise The promise constructor to use.\n  * @param {RPC} options.rpc The RPC instance to use when communicating towards Engine.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.isSuspended = false;\n    this.rpc.on('traffic', (dir, data) => {\n      if (dir === 'sent' && data.method === 'OpenDoc') {\n        this.openDocParams = data.params;\n      }\n    });\n  }\n\n  /**\n  * Function used to restore the rpc connection.\n  * @param {Boolean} onlyIfAttached - if true, the returned promise will resolve\n  *                                   only if the session can be re-attached.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreRpcConnection(onlyIfAttached) {\n    return this.reopen(ON_ATTACHED_TIMEOUT_MS).then((sessionState) => {\n      if (sessionState === 'SESSION_CREATED' && onlyIfAttached) {\n        return this.Promise.reject(new Error('Not attached'));\n      }\n      return this.Promise.resolve();\n    });\n  }\n\n  /**\n  * Function used to restore the global API.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreGlobal(changed) {\n    const global = this.apis.getApisByType('Global').pop();\n    changed.push(global.api);\n    return this.Promise.resolve();\n  }\n\n  /**\n  * Function used to restore the doc API.\n  * @param {String} sessionState - The state of the session, attached or created.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDoc(closed, changed) {\n    const doc = this.apis.getApisByType('Doc').pop();\n\n    if (!doc) {\n      return this.Promise.resolve();\n    }\n\n    return this.rpc.send({\n      method: 'GetActiveDoc',\n      handle: -1,\n      params: [],\n    }).then((response) => {\n      if (response.error && this.openDocParams) {\n        return this.rpc.send({\n          method: 'OpenDoc',\n          handle: -1,\n          params: this.openDocParams,\n        });\n      }\n      return response;\n    }).then((response) => {\n      if (response.error) {\n        closed.push(doc.api);\n        return this.Promise.resolve();\n      }\n      const handle = response.result.qReturn.qHandle;\n      doc.api.handle = handle;\n      changed.push(doc.api);\n      return this.Promise.resolve(doc.api);\n    });\n  }\n\n  /**\n  * Function used to restore the APIs on the doc.\n  * @param {Object} doc - The doc API on which the APIs we want to restore exist.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDocObjects(doc, closed, changed) {\n    const tasks = [];\n    const apis = this.apis.getApis()\n      .map(entry => entry.api)\n      .filter(api => api.type !== 'Global' && api.type !== 'Doc');\n\n    if (!doc) {\n      apis.forEach(api => closed.push(api));\n      return this.Promise.resolve();\n    }\n\n    apis.forEach((api) => {\n      const method = SuspendResume.buildGetMethodName(api.type);\n\n      if (!method) {\n        closed.push(api);\n      } else {\n        const request = this.rpc.send({\n          method,\n          handle: doc.handle,\n          params: [api.id],\n        }).then((response) => {\n          if (response.error || !response.result.qReturn.qHandle) {\n            closed.push(api);\n          } else {\n            api.handle = response.result.qReturn.qHandle;\n            changed.push(api);\n          }\n        });\n        tasks.push(request);\n      }\n    });\n    return this.Promise.all(tasks);\n  }\n\n  /**\n  * Set the instance as suspended.\n  */\n  suspend() {\n    this.isSuspended = true;\n    return this.rpc.close(RPC_CLOSE_MANUAL_SUSPEND);\n  }\n\n  /**\n  * Resumes a previously suspended RPC connection, and refreshes the API cache.\n  *                                APIs unabled to be restored has their 'closed'\n  *                                event triggered, otherwise 'changed'.\n  * @param {Boolean} onlyIfAttached if true, resume only if the session was re-attached.\n  * @returns {Promise} Eventually resolved if the RPC connection was successfully resumed,\n  *                    otherwise rejected.\n  */\n  resume(onlyIfAttached) {\n    const changed = [];\n    const closed = [];\n\n    return this.restoreRpcConnection(onlyIfAttached)\n      .then(() => this.restoreGlobal(changed))\n      .then(() => this.restoreDoc(closed, changed))\n      .then(doc => this.restoreDocObjects(doc, closed, changed))\n      .then(() => {\n        this.isSuspended = false;\n        this.apis.clear();\n        closed.forEach((api) => {\n          api.emit('closed');\n          api.removeAllListeners();\n        });\n        changed.forEach((api) => {\n          this.apis.add(api.handle, api);\n          if (api.type !== 'Global') {\n            api.emit('changed');\n          }\n        });\n      })\n      .catch(err => this.rpc.close().then(() => this.Promise.reject(err)));\n  }\n\n  /**\n  * Reopens the connection and waits for the OnConnected notification.\n  * @param {Number} timeout - The time to wait for the OnConnected notification.\n  * @returns {Object} A promise containing the session state (SESSION_CREATED or SESSION_ATTACHED).\n  */\n  reopen(timeout) {\n    let timer;\n    let notificationResolve;\n    let notificationReceived = false;\n    const notificationPromise = new this.Promise((resolve) => { notificationResolve = resolve; });\n\n    const waitForNotification = () => {\n      if (!notificationReceived) {\n        timer = setTimeout(() => notificationResolve('SESSION_CREATED'), timeout);\n      }\n      return notificationPromise;\n    };\n\n    const onNotification = (data) => {\n      if (data.method !== 'OnConnected') return;\n      clearTimeout(timer);\n      notificationResolve(data.params.qSessionState);\n      notificationReceived = true;\n    };\n\n    this.rpc.on('notification', onNotification);\n\n    return this.rpc.open(true)\n      .then(waitForNotification)\n      .then((state) => {\n        this.rpc.removeListener('notification', onNotification);\n        return state;\n      })\n      .catch((err) => {\n        this.rpc.removeListener('notification', onNotification);\n        return this.Promise.reject(err);\n      });\n  }\n\n  /**\n  * Function used to build the get method names for Doc APIs.\n  * @param {String} type - The API type.\n  * @returns {String} Returns the get method name, or undefined if the type cannot be restored.\n  */\n  static buildGetMethodName(type) {\n    if (type === 'Field' || type === 'Variable') {\n      return null;\n    } else if (type === 'GenericVariable') {\n      return 'GetVariableById';\n    }\n    return type.replace('Generic', 'Get');\n  }\n}\n\nexport default SuspendResume;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import deltaRequest from './interceptors/request/delta';\nimport apiResponse from './interceptors/response/api';\nimport deltaResponse from './interceptors/response/delta';\nimport errorResponse from './interceptors/response/error';\nimport outParamResponse from './interceptors/response/out-param';\nimport resultResponse from './interceptors/response/result';\n\nclass Intercept {\n  /**\n  * Create a new Intercept instance.\n  * @param {Object} options The configuration options for this class.\n  * @param {Promise} options.Promise The promise constructor to use.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  * @param {Array<Object>} [options.request] The additional request interceptors to use.\n  * @param {Array<Object>} [options.response] The additional response interceptors to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.request = [{ onFulfilled: deltaRequest }, ...this.request || []];\n    this.response = [\n      { onFulfilled: errorResponse },\n      { onFulfilled: deltaResponse },\n      { onFulfilled: resultResponse },\n      { onFulfilled: outParamResponse },\n      ...this.response || [],\n      { onFulfilled: apiResponse },\n    ];\n  }\n\n  /**\n  * Execute the request interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @param {Object} session The session instance to execute against.\n  * @param {Promise} promise The promise to chain on to.\n  * @returns {Promise}\n  */\n  executeRequests(session, promise) {\n    return this.request.reduce((interception, interceptor) => {\n      const intercept = interceptor.onFulfilled &&\n        interceptor.onFulfilled.bind(this, session);\n      return interception.then(intercept);\n    }, promise);\n  }\n\n  /**\n  * Execute the response interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @param {Object} session The session instance to execute against.\n  * @param {Promise} promise The promise to chain on to.\n  * @param {Object} request The JSONRPC request object for the intercepted response.\n  * @returns {Promise}\n  */\n  executeResponses(session, promise, request) {\n    return this.response.reduce(\n      (interception, interceptor) =>\n        interception.then(\n          interceptor.onFulfilled && interceptor.onFulfilled.bind(this, session, request),\n          interceptor.onRejected && interceptor.onRejected.bind(this, session, request),\n        )\n      , promise,\n    );\n  }\n}\n\nexport default Intercept;\n","import KeyValueCache from './cache';\n\n/**\n* API cache for instances of QIX types, e.g. GenericObject.\n* @extends KeyValueCache\n*/\nclass ApiCache extends KeyValueCache {\n  /**\n  * Adds an API.\n  * @function ApiCache#add\n  * @param {Number} handle - The handle for the API.\n  * @param {*} api - The API.\n  * @returns {{api: *}} The entry.\n  */\n  add(handle, api) {\n    const entry = { api };\n    super.add(handle.toString(), entry);\n    api.on('closed', () => this.remove(handle));\n    return entry;\n  }\n\n  /**\n  * Gets an API.\n  * @function ApiCache#getApi\n  * @param {Number} handle - The handle for the API.\n  * @returns {*} The API for the handle.\n  */\n  getApi(handle) {\n    const entry = typeof handle !== 'undefined' ? this.get(handle.toString()) : undefined;\n    return entry && entry.api;\n  }\n\n  /**\n  * Gets a list of APIs.\n  * @function ApiCache#getApis\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApis() {\n    return super.getAll().map(entry =>\n      ({\n        handle: entry.key,\n        api: entry.value.api,\n      }));\n  }\n\n  /**\n  * Gets a list of APIs with a given type.\n  * @function ApiCache#getApisByType\n  * @param {String} type - The type of APIs to get.\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApisByType(type) {\n    return this.getApis().filter(entry => entry.api.type === type);\n  }\n}\n\nexport default ApiCache;\n","import Session from './session';\nimport Schema from './schema';\nimport RPC from './rpc';\nimport SuspendResume from './suspend-resume';\nimport Intercept from './intercept';\nimport ApiCache from './api-cache';\n\n/**\n* Qix service.\n*/\nclass Qix {\n  /**\n  * Function used to get a session.\n  * @param {Configuration} config The configuration object for this session.\n  * @returns {Object} Returns a session instance.\n  */\n  static getSession(config) {\n    const {\n      createSocket,\n      Promise,\n      requestInterceptors,\n      responseInterceptors,\n      url,\n    } = config;\n    const apis = new ApiCache();\n    const intercept = new Intercept({\n      apis,\n      Promise,\n      request: requestInterceptors,\n      response: responseInterceptors,\n    });\n    const rpc = new RPC({ createSocket, Promise, url });\n    const suspendResume = new SuspendResume({ apis, Promise, rpc });\n    const session = new Session({\n      apis,\n      config,\n      intercept,\n      rpc,\n      suspendResume,\n    });\n    return session;\n  }\n\n  /**\n  * Function used to create a QIX session.\n  * @param {Object} config The configuration object for the QIX session.\n  * @returns {Session} Returns a new QIX session.\n  */\n  static create(config) {\n    Qix.configureDefaults(config);\n    config.mixins.forEach((mixin) => {\n      config.definition.registerMixin(mixin);\n    });\n    return Qix.getSession(config);\n  }\n\n  /**\n  * Function used to configure defaults.\n  * @param {Configuration} config The configuration object for how to connect\n  *                               and retrieve end QIX APIs.\n  */\n  static configureDefaults(config) {\n    if (!config) {\n      throw new Error('You need to supply a configuration.');\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (!config.Promise && typeof Promise === 'undefined') {\n      throw new Error('Your environment has no Promise implementation. You must provide a Promise implementation in the config.');\n    }\n\n    if (typeof config.createSocket !== 'function' && typeof WebSocket === 'function') {\n      // eslint-disable-next-line no-undef\n      config.createSocket = url => new WebSocket(url);\n    }\n\n    if (typeof config.suspendOnClose === 'undefined') {\n      config.suspendOnClose = false;\n    }\n\n    config.protocol = config.protocol || {};\n    config.protocol.delta = typeof config.protocol.delta !== 'undefined' ? config.protocol.delta : true;\n    // eslint-disable-next-line no-restricted-globals\n    config.Promise = config.Promise || Promise;\n    config.mixins = config.mixins || [];\n    config.definition = config.definition || new Schema(config);\n  }\n}\n\nexport default Qix;\n"],"names":["EventEmitter","init","call","this","toCamelCase","symbol","substring","toLowerCase","namedParamFacade","base","defaults","params","length","babelHelpers.typeof","Object","keys","every","hasOwnProperty","key","map","apply","deltaRequestInterceptor","session","request","delta","config","protocol","outKey","SUCCESS_KEY","apiInterceptor","response","qHandle","qType","getObjectApi","qGenericId","qGenericType","Promise","reject","Error","isObject","v","Array","isArray","isUndef","isFunction","generateValue","val","extend","isSpecialProperty","obj","getParent","data","str","parts","split","slice","numPart","forEach","part","i","newPart","isNaN","emptyObject","getOwnPropertyDescriptor","configurable","compare","a","b","isIdentical","l","patchArray","original","newA","basePath","findIndex","id","idx","qInfo","qId","ii","ll","patches","oldA","tmpIdx","push","splice","concat","JSONPatch","generate","deltaInterceptor","result","patchValue","handle","method","JSON","parse","stringify","errorInterceptor","error","message","code","parameter","outParamInterceptor","RETURN_KEY","qSessionAppId","resultInterceptor","util","arg","isNumber","isUndefined","prototype","_events","undefined","_maxListeners","defaultMaxListeners","setMaxListeners","n","TypeError","emit","type","er","handler","len","args","listeners","arguments","addListener","listener","newListener","warned","m","console","trace","on","once","g","removeListener","fired","list","position","removeAllListeners","listenerCount","emitter","cacheId","Session","options","definition","mixin","rpc","onRpcError","bind","onRpcClosed","onRpcMessage","onRpcNotification","onRpcTraffic","onSessionClosed","err","suspendResume","isSuspended","evt","suspendOnClose","suspend","then","_this","initiator","change","_this2","emitHandleChanged","close","emitHandleClosed","dir","apis","getApis","entry","api","clear","genericType","getApi","create","add","globalPromise","open","_this3","global","createRequestId","promise","intercept","executeRequests","resolve","augmentedRequest","babelHelpers.extends","_this4","send","retry","executeResponses","addToPromiseChain","_this5","onlyIfAttached","resume","value","_this7","name","chain","KeyValueCache","entries","filter","Schema","schema","mixins","types","override","cached","typeKey","entryList","get","structs","factory","generateApi","generateDefaultApi","mixinType","mixinNamedParamFacade","customKey","instance","defineProperties","mixinList","out","Out","Name","fnName","baseFn","In","reduce","item","DefaultValue","RPCResolver","RPC","resolvers","requestId","openedPromise","socket","createSocket","url","onopen","onOpen","onclose","onClose","onerror","onError","onmessage","onMessage","registerResolver","closedPromise","opened","resolveWith","event","closed","rejectAllOutstandingResolvers","reason","rejectWith","resolver","unregisterResolver","resolvedId","rejectedId","readyState","OPEN","jsonrpc","SuspendResume","openDocParams","reopen","sessionState","changed","getApisByType","pop","doc","qReturn","tasks","buildGetMethodName","all","restoreRpcConnection","restoreGlobal","restoreDoc","restoreDocObjects","catch","timeout","timer","notificationResolve","notificationReceived","notificationPromise","onNotification","qSessionState","setTimeout","state","_this6","replace","hasOwn","toStr","toString","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","src","copy","copyIsArray","clone","target","deep","newData","oldVal","tmpPath","patch","parent","path","from","op","newValues","oldParent","createPatch","updateObject","sessions","bindSession","cache","getHandleCache","set","Intercept","onFulfilled","deltaRequest","errorResponse","deltaResponse","resultResponse","outParamResponse","apiResponse","interception","interceptor","onRejected","ApiCache","remove","babelHelpers.get","requestInterceptors","responseInterceptors","configureDefaults","registerMixin","Qix","getSession","WebSocket"],"mappings":"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"}